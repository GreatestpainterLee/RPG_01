// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePackage

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GamePackage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GamePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePackage_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePackage_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePackage_Monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePackage_Monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePackage_Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePackage_Equipment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GamePackage() {
  protobuf_AddDesc_GamePackage();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GamePackage");
  GOOGLE_CHECK(file != NULL);
  GamePackage_descriptor_ = file->message_type(0);
  static const int GamePackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage, monsterlist_),
  };
  GamePackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePackage_descriptor_,
      GamePackage::default_instance_,
      GamePackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePackage));
  GamePackage_Player_descriptor_ = GamePackage_descriptor_->nested_type(0);
  static const int GamePackage_Player_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, destpointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, destpointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, currentpointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, currentpointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, msgcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, predirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, preevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, bloodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, maxbloodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, magicvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, maxmagicvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, empiricalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, maxempiricalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, damagevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, skill_),
  };
  GamePackage_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePackage_Player_descriptor_,
      GamePackage_Player::default_instance_,
      GamePackage_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePackage_Player));
  GamePackage_Monster_descriptor_ = GamePackage_descriptor_->nested_type(1);
  static const int GamePackage_Monster_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, predirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, preevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, monstertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, monstername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, destpointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, destpointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, currentpointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, currentpointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, bloodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, maxbloodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, empiricalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, damagevalue_),
  };
  GamePackage_Monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePackage_Monster_descriptor_,
      GamePackage_Monster::default_instance_,
      GamePackage_Monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePackage_Monster));
  GamePackage_Equipment_descriptor_ = GamePackage_descriptor_->nested_type(2);
  static const int GamePackage_Equipment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Equipment, equipmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Equipment, returnblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Equipment, returnmagic_),
  };
  GamePackage_Equipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePackage_Equipment_descriptor_,
      GamePackage_Equipment::default_instance_,
      GamePackage_Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Equipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePackage_Equipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePackage_Equipment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GamePackage);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePackage_descriptor_, &GamePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePackage_Player_descriptor_, &GamePackage_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePackage_Monster_descriptor_, &GamePackage_Monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePackage_Equipment_descriptor_, &GamePackage_Equipment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GamePackage() {
  delete GamePackage::default_instance_;
  delete GamePackage_reflection_;
  delete GamePackage_Player::default_instance_;
  delete GamePackage_Player_reflection_;
  delete GamePackage_Monster::default_instance_;
  delete GamePackage_Monster_reflection_;
  delete GamePackage_Equipment::default_instance_;
  delete GamePackage_Equipment_reflection_;
}

void protobuf_AddDesc_GamePackage() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013GamePackage\"\247\007\n\013GamePackage\022\'\n\nPlayerL"
    "ist\030\001 \003(\0132\023.GamePackage.Player\022)\n\013Monste"
    "rList\030\002 \003(\0132\024.GamePackage.Monster\032\251\003\n\006Pl"
    "ayer\022\016\n\006UserID\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022\020"
    "\n\010Password\030\003 \001(\t\022\r\n\005Speed\030\004 \001(\002\022\021\n\tDirec"
    "tion\030\005 \001(\005\022\022\n\nDestPointX\030\006 \001(\002\022\022\n\nDestPo"
    "intY\030\007 \001(\002\022\025\n\rCurrentPointX\030\010 \001(\002\022\025\n\rCur"
    "rentPointY\030\t \001(\002\022\017\n\007MsgCode\030\n \001(\005\022\024\n\014Pre"
    "Direction\030\013 \001(\005\022\020\n\010PreEvent\030\014 \001(\005\022\022\n\nBlo"
    "odValue\030\r \001(\002\022\025\n\rMaxBloodValue\030\016 \001(\002\022\022\n\n"
    "MagicValue\030\017 \001(\002\022\025\n\rMaxMagicValue\030\020 \001(\002\022"
    "\026\n\016EmpiricalValue\030\021 \001(\002\022\031\n\021MaxEmpiricalV"
    "alue\030\022 \001(\002\022\r\n\005Level\030\023 \001(\005\022\023\n\013DamageValue"
    "\030\024 \001(\002\022\r\n\005Skill\030\025 \001(\005\032\311\002\n\007Monster\022\024\n\014Pre"
    "Direction\030\001 \001(\005\022\020\n\010PreEvent\030\002 \001(\005\022\023\n\013Mon"
    "sterType\030\003 \001(\005\022\023\n\013MonsterName\030\004 \001(\t\022\r\n\005S"
    "peed\030\005 \001(\002\022\021\n\tDirection\030\006 \001(\005\022\022\n\nDestPoi"
    "ntX\030\007 \001(\002\022\022\n\nDestPointY\030\010 \001(\002\022\025\n\rCurrent"
    "PointX\030\t \001(\002\022\025\n\rCurrentPointY\030\n \001(\002\022\r\n\005E"
    "vent\030\013 \001(\005\022\022\n\nBloodValue\030\014 \001(\002\022\025\n\rMaxBlo"
    "odValue\030\r \001(\002\022\r\n\005Level\030\016 \001(\005\022\026\n\016Empirica"
    "lValue\030\017 \001(\002\022\023\n\013DamageValue\030\020 \001(\002\032L\n\tEqu"
    "ipment\022\025\n\rEquipmentType\030\001 \001(\005\022\023\n\013ReturnB"
    "lood\030\002 \001(\005\022\023\n\013ReturnMagic\030\003 \001(\005", 951);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GamePackage", &protobuf_RegisterTypes);
  GamePackage::default_instance_ = new GamePackage();
  GamePackage_Player::default_instance_ = new GamePackage_Player();
  GamePackage_Monster::default_instance_ = new GamePackage_Monster();
  GamePackage_Equipment::default_instance_ = new GamePackage_Equipment();
  GamePackage::default_instance_->InitAsDefaultInstance();
  GamePackage_Player::default_instance_->InitAsDefaultInstance();
  GamePackage_Monster::default_instance_->InitAsDefaultInstance();
  GamePackage_Equipment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GamePackage);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GamePackage {
  StaticDescriptorInitializer_GamePackage() {
    protobuf_AddDesc_GamePackage();
  }
} static_descriptor_initializer_GamePackage_;

// ===================================================================

#ifndef _MSC_VER
const int GamePackage_Player::kUserIDFieldNumber;
const int GamePackage_Player::kUserNameFieldNumber;
const int GamePackage_Player::kPasswordFieldNumber;
const int GamePackage_Player::kSpeedFieldNumber;
const int GamePackage_Player::kDirectionFieldNumber;
const int GamePackage_Player::kDestPointXFieldNumber;
const int GamePackage_Player::kDestPointYFieldNumber;
const int GamePackage_Player::kCurrentPointXFieldNumber;
const int GamePackage_Player::kCurrentPointYFieldNumber;
const int GamePackage_Player::kMsgCodeFieldNumber;
const int GamePackage_Player::kPreDirectionFieldNumber;
const int GamePackage_Player::kPreEventFieldNumber;
const int GamePackage_Player::kBloodValueFieldNumber;
const int GamePackage_Player::kMaxBloodValueFieldNumber;
const int GamePackage_Player::kMagicValueFieldNumber;
const int GamePackage_Player::kMaxMagicValueFieldNumber;
const int GamePackage_Player::kEmpiricalValueFieldNumber;
const int GamePackage_Player::kMaxEmpiricalValueFieldNumber;
const int GamePackage_Player::kLevelFieldNumber;
const int GamePackage_Player::kDamageValueFieldNumber;
const int GamePackage_Player::kSkillFieldNumber;
#endif  // !_MSC_VER

GamePackage_Player::GamePackage_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePackage_Player::InitAsDefaultInstance() {
}

GamePackage_Player::GamePackage_Player(const GamePackage_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePackage_Player::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_ = 0;
  direction_ = 0;
  destpointx_ = 0;
  destpointy_ = 0;
  currentpointx_ = 0;
  currentpointy_ = 0;
  msgcode_ = 0;
  predirection_ = 0;
  preevent_ = 0;
  bloodvalue_ = 0;
  maxbloodvalue_ = 0;
  magicvalue_ = 0;
  maxmagicvalue_ = 0;
  empiricalvalue_ = 0;
  maxempiricalvalue_ = 0;
  level_ = 0;
  damagevalue_ = 0;
  skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePackage_Player::~GamePackage_Player() {
  SharedDtor();
}

void GamePackage_Player::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GamePackage_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePackage_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePackage_Player_descriptor_;
}

const GamePackage_Player& GamePackage_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePackage();
  return *default_instance_;
}

GamePackage_Player* GamePackage_Player::default_instance_ = NULL;

GamePackage_Player* GamePackage_Player::New() const {
  return new GamePackage_Player;
}

void GamePackage_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    speed_ = 0;
    direction_ = 0;
    destpointx_ = 0;
    destpointy_ = 0;
    currentpointx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    currentpointy_ = 0;
    msgcode_ = 0;
    predirection_ = 0;
    preevent_ = 0;
    bloodvalue_ = 0;
    maxbloodvalue_ = 0;
    magicvalue_ = 0;
    maxmagicvalue_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    empiricalvalue_ = 0;
    maxempiricalvalue_ = 0;
    level_ = 0;
    damagevalue_ = 0;
    skill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePackage_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }

      // optional string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Speed;
        break;
      }

      // optional float Speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Direction;
        break;
      }

      // optional int32 Direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_DestPointX;
        break;
      }

      // optional float DestPointX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DestPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destpointx_)));
          set_has_destpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_DestPointY;
        break;
      }

      // optional float DestPointY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DestPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destpointy_)));
          set_has_destpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_CurrentPointX;
        break;
      }

      // optional float CurrentPointX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CurrentPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentpointx_)));
          set_has_currentpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_CurrentPointY;
        break;
      }

      // optional float CurrentPointY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CurrentPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentpointy_)));
          set_has_currentpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_MsgCode;
        break;
      }

      // optional int32 MsgCode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MsgCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgcode_)));
          set_has_msgcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_PreDirection;
        break;
      }

      // optional int32 PreDirection = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predirection_)));
          set_has_predirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PreEvent;
        break;
      }

      // optional int32 PreEvent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preevent_)));
          set_has_preevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_BloodValue;
        break;
      }

      // optional float BloodValue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BloodValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bloodvalue_)));
          set_has_bloodvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_MaxBloodValue;
        break;
      }

      // optional float MaxBloodValue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxBloodValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxbloodvalue_)));
          set_has_maxbloodvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_MagicValue;
        break;
      }

      // optional float MagicValue = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MagicValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magicvalue_)));
          set_has_magicvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_MaxMagicValue;
        break;
      }

      // optional float MaxMagicValue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxMagicValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxmagicvalue_)));
          set_has_maxmagicvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_EmpiricalValue;
        break;
      }

      // optional float EmpiricalValue = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_EmpiricalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &empiricalvalue_)));
          set_has_empiricalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_MaxEmpiricalValue;
        break;
      }

      // optional float MaxEmpiricalValue = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxEmpiricalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxempiricalvalue_)));
          set_has_maxempiricalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Level;
        break;
      }

      // optional int32 Level = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_DamageValue;
        break;
      }

      // optional float DamageValue = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DamageValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damagevalue_)));
          set_has_damagevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Skill;
        break;
      }

      // optional int32 Skill = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePackage_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional float Speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional int32 Direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->direction(), output);
  }

  // optional float DestPointX = 6;
  if (has_destpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->destpointx(), output);
  }

  // optional float DestPointY = 7;
  if (has_destpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->destpointy(), output);
  }

  // optional float CurrentPointX = 8;
  if (has_currentpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->currentpointx(), output);
  }

  // optional float CurrentPointY = 9;
  if (has_currentpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->currentpointy(), output);
  }

  // optional int32 MsgCode = 10;
  if (has_msgcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->msgcode(), output);
  }

  // optional int32 PreDirection = 11;
  if (has_predirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->predirection(), output);
  }

  // optional int32 PreEvent = 12;
  if (has_preevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->preevent(), output);
  }

  // optional float BloodValue = 13;
  if (has_bloodvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->bloodvalue(), output);
  }

  // optional float MaxBloodValue = 14;
  if (has_maxbloodvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->maxbloodvalue(), output);
  }

  // optional float MagicValue = 15;
  if (has_magicvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->magicvalue(), output);
  }

  // optional float MaxMagicValue = 16;
  if (has_maxmagicvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->maxmagicvalue(), output);
  }

  // optional float EmpiricalValue = 17;
  if (has_empiricalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->empiricalvalue(), output);
  }

  // optional float MaxEmpiricalValue = 18;
  if (has_maxempiricalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->maxempiricalvalue(), output);
  }

  // optional int32 Level = 19;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->level(), output);
  }

  // optional float DamageValue = 20;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->damagevalue(), output);
  }

  // optional int32 Skill = 21;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePackage_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional float Speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional int32 Direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->direction(), target);
  }

  // optional float DestPointX = 6;
  if (has_destpointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->destpointx(), target);
  }

  // optional float DestPointY = 7;
  if (has_destpointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->destpointy(), target);
  }

  // optional float CurrentPointX = 8;
  if (has_currentpointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->currentpointx(), target);
  }

  // optional float CurrentPointY = 9;
  if (has_currentpointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->currentpointy(), target);
  }

  // optional int32 MsgCode = 10;
  if (has_msgcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->msgcode(), target);
  }

  // optional int32 PreDirection = 11;
  if (has_predirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->predirection(), target);
  }

  // optional int32 PreEvent = 12;
  if (has_preevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->preevent(), target);
  }

  // optional float BloodValue = 13;
  if (has_bloodvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->bloodvalue(), target);
  }

  // optional float MaxBloodValue = 14;
  if (has_maxbloodvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->maxbloodvalue(), target);
  }

  // optional float MagicValue = 15;
  if (has_magicvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->magicvalue(), target);
  }

  // optional float MaxMagicValue = 16;
  if (has_maxmagicvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->maxmagicvalue(), target);
  }

  // optional float EmpiricalValue = 17;
  if (has_empiricalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->empiricalvalue(), target);
  }

  // optional float MaxEmpiricalValue = 18;
  if (has_maxempiricalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->maxempiricalvalue(), target);
  }

  // optional int32 Level = 19;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->level(), target);
  }

  // optional float DamageValue = 20;
  if (has_damagevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->damagevalue(), target);
  }

  // optional int32 Skill = 21;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePackage_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional float Speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 Direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional float DestPointX = 6;
    if (has_destpointx()) {
      total_size += 1 + 4;
    }

    // optional float DestPointY = 7;
    if (has_destpointy()) {
      total_size += 1 + 4;
    }

    // optional float CurrentPointX = 8;
    if (has_currentpointx()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float CurrentPointY = 9;
    if (has_currentpointy()) {
      total_size += 1 + 4;
    }

    // optional int32 MsgCode = 10;
    if (has_msgcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgcode());
    }

    // optional int32 PreDirection = 11;
    if (has_predirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predirection());
    }

    // optional int32 PreEvent = 12;
    if (has_preevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preevent());
    }

    // optional float BloodValue = 13;
    if (has_bloodvalue()) {
      total_size += 1 + 4;
    }

    // optional float MaxBloodValue = 14;
    if (has_maxbloodvalue()) {
      total_size += 1 + 4;
    }

    // optional float MagicValue = 15;
    if (has_magicvalue()) {
      total_size += 1 + 4;
    }

    // optional float MaxMagicValue = 16;
    if (has_maxmagicvalue()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float EmpiricalValue = 17;
    if (has_empiricalvalue()) {
      total_size += 2 + 4;
    }

    // optional float MaxEmpiricalValue = 18;
    if (has_maxempiricalvalue()) {
      total_size += 2 + 4;
    }

    // optional int32 Level = 19;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional float DamageValue = 20;
    if (has_damagevalue()) {
      total_size += 2 + 4;
    }

    // optional int32 Skill = 21;
    if (has_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePackage_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePackage_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePackage_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePackage_Player::MergeFrom(const GamePackage_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_destpointx()) {
      set_destpointx(from.destpointx());
    }
    if (from.has_destpointy()) {
      set_destpointy(from.destpointy());
    }
    if (from.has_currentpointx()) {
      set_currentpointx(from.currentpointx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currentpointy()) {
      set_currentpointy(from.currentpointy());
    }
    if (from.has_msgcode()) {
      set_msgcode(from.msgcode());
    }
    if (from.has_predirection()) {
      set_predirection(from.predirection());
    }
    if (from.has_preevent()) {
      set_preevent(from.preevent());
    }
    if (from.has_bloodvalue()) {
      set_bloodvalue(from.bloodvalue());
    }
    if (from.has_maxbloodvalue()) {
      set_maxbloodvalue(from.maxbloodvalue());
    }
    if (from.has_magicvalue()) {
      set_magicvalue(from.magicvalue());
    }
    if (from.has_maxmagicvalue()) {
      set_maxmagicvalue(from.maxmagicvalue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_empiricalvalue()) {
      set_empiricalvalue(from.empiricalvalue());
    }
    if (from.has_maxempiricalvalue()) {
      set_maxempiricalvalue(from.maxempiricalvalue());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_damagevalue()) {
      set_damagevalue(from.damagevalue());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePackage_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePackage_Player::CopyFrom(const GamePackage_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePackage_Player::IsInitialized() const {

  return true;
}

void GamePackage_Player::Swap(GamePackage_Player* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(speed_, other->speed_);
    std::swap(direction_, other->direction_);
    std::swap(destpointx_, other->destpointx_);
    std::swap(destpointy_, other->destpointy_);
    std::swap(currentpointx_, other->currentpointx_);
    std::swap(currentpointy_, other->currentpointy_);
    std::swap(msgcode_, other->msgcode_);
    std::swap(predirection_, other->predirection_);
    std::swap(preevent_, other->preevent_);
    std::swap(bloodvalue_, other->bloodvalue_);
    std::swap(maxbloodvalue_, other->maxbloodvalue_);
    std::swap(magicvalue_, other->magicvalue_);
    std::swap(maxmagicvalue_, other->maxmagicvalue_);
    std::swap(empiricalvalue_, other->empiricalvalue_);
    std::swap(maxempiricalvalue_, other->maxempiricalvalue_);
    std::swap(level_, other->level_);
    std::swap(damagevalue_, other->damagevalue_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePackage_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePackage_Player_descriptor_;
  metadata.reflection = GamePackage_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GamePackage_Monster::kPreDirectionFieldNumber;
const int GamePackage_Monster::kPreEventFieldNumber;
const int GamePackage_Monster::kMonsterTypeFieldNumber;
const int GamePackage_Monster::kMonsterNameFieldNumber;
const int GamePackage_Monster::kSpeedFieldNumber;
const int GamePackage_Monster::kDirectionFieldNumber;
const int GamePackage_Monster::kDestPointXFieldNumber;
const int GamePackage_Monster::kDestPointYFieldNumber;
const int GamePackage_Monster::kCurrentPointXFieldNumber;
const int GamePackage_Monster::kCurrentPointYFieldNumber;
const int GamePackage_Monster::kEventFieldNumber;
const int GamePackage_Monster::kBloodValueFieldNumber;
const int GamePackage_Monster::kMaxBloodValueFieldNumber;
const int GamePackage_Monster::kLevelFieldNumber;
const int GamePackage_Monster::kEmpiricalValueFieldNumber;
const int GamePackage_Monster::kDamageValueFieldNumber;
#endif  // !_MSC_VER

GamePackage_Monster::GamePackage_Monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePackage_Monster::InitAsDefaultInstance() {
}

GamePackage_Monster::GamePackage_Monster(const GamePackage_Monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePackage_Monster::SharedCtor() {
  _cached_size_ = 0;
  predirection_ = 0;
  preevent_ = 0;
  monstertype_ = 0;
  monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_ = 0;
  direction_ = 0;
  destpointx_ = 0;
  destpointy_ = 0;
  currentpointx_ = 0;
  currentpointy_ = 0;
  event_ = 0;
  bloodvalue_ = 0;
  maxbloodvalue_ = 0;
  level_ = 0;
  empiricalvalue_ = 0;
  damagevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePackage_Monster::~GamePackage_Monster() {
  SharedDtor();
}

void GamePackage_Monster::SharedDtor() {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (this != default_instance_) {
  }
}

void GamePackage_Monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePackage_Monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePackage_Monster_descriptor_;
}

const GamePackage_Monster& GamePackage_Monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePackage();
  return *default_instance_;
}

GamePackage_Monster* GamePackage_Monster::default_instance_ = NULL;

GamePackage_Monster* GamePackage_Monster::New() const {
  return new GamePackage_Monster;
}

void GamePackage_Monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    predirection_ = 0;
    preevent_ = 0;
    monstertype_ = 0;
    if (has_monstername()) {
      if (monstername_ != &::google::protobuf::internal::kEmptyString) {
        monstername_->clear();
      }
    }
    speed_ = 0;
    direction_ = 0;
    destpointx_ = 0;
    destpointy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    currentpointx_ = 0;
    currentpointy_ = 0;
    event_ = 0;
    bloodvalue_ = 0;
    maxbloodvalue_ = 0;
    level_ = 0;
    empiricalvalue_ = 0;
    damagevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePackage_Monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PreDirection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predirection_)));
          set_has_predirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PreEvent;
        break;
      }

      // optional int32 PreEvent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preevent_)));
          set_has_preevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MonsterType;
        break;
      }

      // optional int32 MonsterType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monstertype_)));
          set_has_monstertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MonsterName;
        break;
      }

      // optional string MonsterName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monstername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monstername().data(), this->monstername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Speed;
        break;
      }

      // optional float Speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Direction;
        break;
      }

      // optional int32 Direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_DestPointX;
        break;
      }

      // optional float DestPointX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DestPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destpointx_)));
          set_has_destpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_DestPointY;
        break;
      }

      // optional float DestPointY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DestPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &destpointy_)));
          set_has_destpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_CurrentPointX;
        break;
      }

      // optional float CurrentPointX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CurrentPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentpointx_)));
          set_has_currentpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_CurrentPointY;
        break;
      }

      // optional float CurrentPointY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CurrentPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentpointy_)));
          set_has_currentpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Event;
        break;
      }

      // optional int32 Event = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_BloodValue;
        break;
      }

      // optional float BloodValue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BloodValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bloodvalue_)));
          set_has_bloodvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_MaxBloodValue;
        break;
      }

      // optional float MaxBloodValue = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxBloodValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxbloodvalue_)));
          set_has_maxbloodvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_Level;
        break;
      }

      // optional int32 Level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_EmpiricalValue;
        break;
      }

      // optional float EmpiricalValue = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_EmpiricalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &empiricalvalue_)));
          set_has_empiricalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_DamageValue;
        break;
      }

      // optional float DamageValue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DamageValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damagevalue_)));
          set_has_damagevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePackage_Monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PreDirection = 1;
  if (has_predirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->predirection(), output);
  }

  // optional int32 PreEvent = 2;
  if (has_preevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preevent(), output);
  }

  // optional int32 MonsterType = 3;
  if (has_monstertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monstertype(), output);
  }

  // optional string MonsterName = 4;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->monstername(), output);
  }

  // optional float Speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // optional int32 Direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->direction(), output);
  }

  // optional float DestPointX = 7;
  if (has_destpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->destpointx(), output);
  }

  // optional float DestPointY = 8;
  if (has_destpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->destpointy(), output);
  }

  // optional float CurrentPointX = 9;
  if (has_currentpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->currentpointx(), output);
  }

  // optional float CurrentPointY = 10;
  if (has_currentpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->currentpointy(), output);
  }

  // optional int32 Event = 11;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->event(), output);
  }

  // optional float BloodValue = 12;
  if (has_bloodvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->bloodvalue(), output);
  }

  // optional float MaxBloodValue = 13;
  if (has_maxbloodvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->maxbloodvalue(), output);
  }

  // optional int32 Level = 14;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->level(), output);
  }

  // optional float EmpiricalValue = 15;
  if (has_empiricalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->empiricalvalue(), output);
  }

  // optional float DamageValue = 16;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->damagevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePackage_Monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PreDirection = 1;
  if (has_predirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->predirection(), target);
  }

  // optional int32 PreEvent = 2;
  if (has_preevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preevent(), target);
  }

  // optional int32 MonsterType = 3;
  if (has_monstertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monstertype(), target);
  }

  // optional string MonsterName = 4;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monstername(), target);
  }

  // optional float Speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // optional int32 Direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->direction(), target);
  }

  // optional float DestPointX = 7;
  if (has_destpointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->destpointx(), target);
  }

  // optional float DestPointY = 8;
  if (has_destpointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->destpointy(), target);
  }

  // optional float CurrentPointX = 9;
  if (has_currentpointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->currentpointx(), target);
  }

  // optional float CurrentPointY = 10;
  if (has_currentpointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->currentpointy(), target);
  }

  // optional int32 Event = 11;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->event(), target);
  }

  // optional float BloodValue = 12;
  if (has_bloodvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->bloodvalue(), target);
  }

  // optional float MaxBloodValue = 13;
  if (has_maxbloodvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->maxbloodvalue(), target);
  }

  // optional int32 Level = 14;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->level(), target);
  }

  // optional float EmpiricalValue = 15;
  if (has_empiricalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->empiricalvalue(), target);
  }

  // optional float DamageValue = 16;
  if (has_damagevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->damagevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePackage_Monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PreDirection = 1;
    if (has_predirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predirection());
    }

    // optional int32 PreEvent = 2;
    if (has_preevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preevent());
    }

    // optional int32 MonsterType = 3;
    if (has_monstertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monstertype());
    }

    // optional string MonsterName = 4;
    if (has_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monstername());
    }

    // optional float Speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 Direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional float DestPointX = 7;
    if (has_destpointx()) {
      total_size += 1 + 4;
    }

    // optional float DestPointY = 8;
    if (has_destpointy()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float CurrentPointX = 9;
    if (has_currentpointx()) {
      total_size += 1 + 4;
    }

    // optional float CurrentPointY = 10;
    if (has_currentpointy()) {
      total_size += 1 + 4;
    }

    // optional int32 Event = 11;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event());
    }

    // optional float BloodValue = 12;
    if (has_bloodvalue()) {
      total_size += 1 + 4;
    }

    // optional float MaxBloodValue = 13;
    if (has_maxbloodvalue()) {
      total_size += 1 + 4;
    }

    // optional int32 Level = 14;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional float EmpiricalValue = 15;
    if (has_empiricalvalue()) {
      total_size += 1 + 4;
    }

    // optional float DamageValue = 16;
    if (has_damagevalue()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePackage_Monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePackage_Monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePackage_Monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePackage_Monster::MergeFrom(const GamePackage_Monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predirection()) {
      set_predirection(from.predirection());
    }
    if (from.has_preevent()) {
      set_preevent(from.preevent());
    }
    if (from.has_monstertype()) {
      set_monstertype(from.monstertype());
    }
    if (from.has_monstername()) {
      set_monstername(from.monstername());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_destpointx()) {
      set_destpointx(from.destpointx());
    }
    if (from.has_destpointy()) {
      set_destpointy(from.destpointy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currentpointx()) {
      set_currentpointx(from.currentpointx());
    }
    if (from.has_currentpointy()) {
      set_currentpointy(from.currentpointy());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_bloodvalue()) {
      set_bloodvalue(from.bloodvalue());
    }
    if (from.has_maxbloodvalue()) {
      set_maxbloodvalue(from.maxbloodvalue());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_empiricalvalue()) {
      set_empiricalvalue(from.empiricalvalue());
    }
    if (from.has_damagevalue()) {
      set_damagevalue(from.damagevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePackage_Monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePackage_Monster::CopyFrom(const GamePackage_Monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePackage_Monster::IsInitialized() const {

  return true;
}

void GamePackage_Monster::Swap(GamePackage_Monster* other) {
  if (other != this) {
    std::swap(predirection_, other->predirection_);
    std::swap(preevent_, other->preevent_);
    std::swap(monstertype_, other->monstertype_);
    std::swap(monstername_, other->monstername_);
    std::swap(speed_, other->speed_);
    std::swap(direction_, other->direction_);
    std::swap(destpointx_, other->destpointx_);
    std::swap(destpointy_, other->destpointy_);
    std::swap(currentpointx_, other->currentpointx_);
    std::swap(currentpointy_, other->currentpointy_);
    std::swap(event_, other->event_);
    std::swap(bloodvalue_, other->bloodvalue_);
    std::swap(maxbloodvalue_, other->maxbloodvalue_);
    std::swap(level_, other->level_);
    std::swap(empiricalvalue_, other->empiricalvalue_);
    std::swap(damagevalue_, other->damagevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePackage_Monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePackage_Monster_descriptor_;
  metadata.reflection = GamePackage_Monster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GamePackage_Equipment::kEquipmentTypeFieldNumber;
const int GamePackage_Equipment::kReturnBloodFieldNumber;
const int GamePackage_Equipment::kReturnMagicFieldNumber;
#endif  // !_MSC_VER

GamePackage_Equipment::GamePackage_Equipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePackage_Equipment::InitAsDefaultInstance() {
}

GamePackage_Equipment::GamePackage_Equipment(const GamePackage_Equipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePackage_Equipment::SharedCtor() {
  _cached_size_ = 0;
  equipmenttype_ = 0;
  returnblood_ = 0;
  returnmagic_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePackage_Equipment::~GamePackage_Equipment() {
  SharedDtor();
}

void GamePackage_Equipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePackage_Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePackage_Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePackage_Equipment_descriptor_;
}

const GamePackage_Equipment& GamePackage_Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePackage();
  return *default_instance_;
}

GamePackage_Equipment* GamePackage_Equipment::default_instance_ = NULL;

GamePackage_Equipment* GamePackage_Equipment::New() const {
  return new GamePackage_Equipment;
}

void GamePackage_Equipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipmenttype_ = 0;
    returnblood_ = 0;
    returnmagic_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePackage_Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EquipmentType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmenttype_)));
          set_has_equipmenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReturnBlood;
        break;
      }

      // optional int32 ReturnBlood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnblood_)));
          set_has_returnblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReturnMagic;
        break;
      }

      // optional int32 ReturnMagic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnMagic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnmagic_)));
          set_has_returnmagic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePackage_Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 EquipmentType = 1;
  if (has_equipmenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipmenttype(), output);
  }

  // optional int32 ReturnBlood = 2;
  if (has_returnblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->returnblood(), output);
  }

  // optional int32 ReturnMagic = 3;
  if (has_returnmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->returnmagic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePackage_Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 EquipmentType = 1;
  if (has_equipmenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipmenttype(), target);
  }

  // optional int32 ReturnBlood = 2;
  if (has_returnblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->returnblood(), target);
  }

  // optional int32 ReturnMagic = 3;
  if (has_returnmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->returnmagic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePackage_Equipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EquipmentType = 1;
    if (has_equipmenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmenttype());
    }

    // optional int32 ReturnBlood = 2;
    if (has_returnblood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnblood());
    }

    // optional int32 ReturnMagic = 3;
    if (has_returnmagic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnmagic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePackage_Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePackage_Equipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePackage_Equipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePackage_Equipment::MergeFrom(const GamePackage_Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipmenttype()) {
      set_equipmenttype(from.equipmenttype());
    }
    if (from.has_returnblood()) {
      set_returnblood(from.returnblood());
    }
    if (from.has_returnmagic()) {
      set_returnmagic(from.returnmagic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePackage_Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePackage_Equipment::CopyFrom(const GamePackage_Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePackage_Equipment::IsInitialized() const {

  return true;
}

void GamePackage_Equipment::Swap(GamePackage_Equipment* other) {
  if (other != this) {
    std::swap(equipmenttype_, other->equipmenttype_);
    std::swap(returnblood_, other->returnblood_);
    std::swap(returnmagic_, other->returnmagic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePackage_Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePackage_Equipment_descriptor_;
  metadata.reflection = GamePackage_Equipment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GamePackage::kPlayerListFieldNumber;
const int GamePackage::kMonsterListFieldNumber;
#endif  // !_MSC_VER

GamePackage::GamePackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePackage::InitAsDefaultInstance() {
}

GamePackage::GamePackage(const GamePackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePackage::~GamePackage() {
  SharedDtor();
}

void GamePackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePackage_descriptor_;
}

const GamePackage& GamePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePackage();
  return *default_instance_;
}

GamePackage* GamePackage::default_instance_ = NULL;

GamePackage* GamePackage::New() const {
  return new GamePackage;
}

void GamePackage::Clear() {
  playerlist_.Clear();
  monsterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GamePackage.Player PlayerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PlayerList;
        if (input->ExpectTag(18)) goto parse_MonsterList;
        break;
      }

      // repeated .GamePackage.Monster MonsterList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MonsterList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GamePackage.Player PlayerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerlist(i), output);
  }

  // repeated .GamePackage.Monster MonsterList = 2;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GamePackage.Player PlayerList = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerlist(i), target);
  }

  // repeated .GamePackage.Monster MonsterList = 2;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePackage::ByteSize() const {
  int total_size = 0;

  // repeated .GamePackage.Player PlayerList = 1;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  // repeated .GamePackage.Monster MonsterList = 2;
  total_size += 1 * this->monsterlist_size();
  for (int i = 0; i < this->monsterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePackage::MergeFrom(const GamePackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  monsterlist_.MergeFrom(from.monsterlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePackage::CopyFrom(const GamePackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePackage::IsInitialized() const {

  return true;
}

void GamePackage::Swap(GamePackage* other) {
  if (other != this) {
    playerlist_.Swap(&other->playerlist_);
    monsterlist_.Swap(&other->monsterlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePackage_descriptor_;
  metadata.reflection = GamePackage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
